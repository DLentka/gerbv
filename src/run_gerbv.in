#!/bin/sh
#

# This is a wrapper script used to help gerbv find its scheme init file
# when testing out gerbv prior to installation.

# If the first argument is "-gdb" then run gerbv inside the gdb
# debugger.  
#
# Use  --g-fatal-warnings to cause gtk-WARNING's to
# abort.


usage() {
cat << EOF

$0 - tests out gerbv prior to installation

$0 [-gdb] [-h|--help] [--] [gerbv arguments]

Options:

  -gdb       - runs gerbv in the GDB debugger

  -h|--help  - displays this message and exits

  --         - halts all further option processing all additional options
               are passed down to gerbv.


See also:

  $0 -- --help

  for information on the gerbv options

EOF
}

do_gdb=no
while test $# -gt 0 ; do
	case $1 in
		-gdb)
			do_gdb=yes
			shift
			;;

		-h|--help)
			usage
			exit
			;;

		--)
			shift
			break
			;;

		-*)
			echo "$0:  Unknown option $1"
			echo "See $0 --help for more information."
			exit 1
			;;

		*)
			break
			;;
	esac
done


if test $do_gdb = yes ; then
	# Create a temp directory in a safe manner that is only accessible by us.
	# This will allow for safe use of temporary files.
	tmpd=${TMPDIR:-/tmp}/run_gerbv.$$
	mkdir -p -m 0700 $tmpd
	rc=$?
	if test $rc -ne 0 ; then
		echo "$0:  Unable to create temp directory $tmpd"
		echo "Either the directory exists already or you do not have permissions"
		exit 1
	fi

	tmpf=${tmpd}/run_gerbv.gdb
	echo set args "$@"  > $tmpf
	echo set env GERBV_SCHEMEINIT @SRCDIR@ >> $tmpf
	exec ../libtool --mode=execute gdb -x $tmpf ./gerbv
	rm -f $tmpf
	rm -fr $tmpd
else
	GERBV_SCHEMEINIT="@SRCDIR@"
	export GERBV_SCHEMEINIT
	exec ./gerbv "$@"
fi

