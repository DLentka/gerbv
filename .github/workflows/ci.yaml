name: CI

# Controls when the action will run. Triggers the workflow on push or pull
# request events but only for the main branch
on:
  push:
    branches:
      - main
      - dev
    tags:
      - "**"
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        coverage: ["-coverage", ""] # Coverage build and a regular one
        include:
          - coverage: "-coverage"
            code_coverage: "--enable-code-coverage" # Only coverage build has this defined.
    name: ci${{ matrix.coverage }} # Coverage build has "-coverage" added to the name.

    steps:
    - uses: actions/checkout@v3

    - name: Get number of jobs for compiling
      run: echo "NUM_BUILD_JOBS=$((`nproc --all` * 4))" >> $GITHUB_ENV

    - name: Set a local install path
      run: echo "LOCAL_INSTALL_PATH=${HOME}/.local" >> $GITHUB_ENV

    - name: Update apt sources
      # We must install a newer clang-format than the default of Ubuntu 20.04.
      run: |
        pushd /etc/apt/trusted.gpg.d/
        sudo wget -q -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee llvm-snapshot.gpg.key.asc
        popd
        pushd /etc/apt/sources.list.d
        echo 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main' | sudo tee -a llvm-toolchain-focal-14.list
        echo 'deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main' | sudo tee -a llvm-toolchain-focal-14.list
        popd
        sudo apt-get update

    - name: Check code formatting
      if: matrix.code_coverage
      run: |
        sudo apt-get install clang-format-14
        clang-format-14 --version
        clang-format-14 -n -Werror src/*.h src/*.c src/*.cpp

    - name: Get requirements for configure and build
      run: |
        sudo apt-get install autopoint libgtkmm-2.4-dev desktop-file-utils libc6-dbg

    - name: Install coverage specific programs
      if: matrix.code_coverage
      run: |
        sudo apt-get install libperlio-gzip-perl libjson-perl
        pushd ~
        git clone --depth=1 --branch=v1.16 https://github.com/linux-test-project/lcov.git
        pushd lcov
        make PREFIX=${LOCAL_INSTALL_PATH} install
        hash -r
        lcov --version

    - name: Install valgrind
      if: "!matrix.code_coverage"
      run: |
        pushd ~
        git clone --depth=1 --branch=master https://github.com/eyal0/valgrind.git
        pushd valgrind
        sh autogen.sh
        ./configure --prefix=${LOCAL_INSTALL_PATH}
        make -j ${NUM_BUILD_JOBS}
        make install
        popd
        popd

    - name: Configure
      run: |
        sh autogen.sh
        ./configure CPPFLAGS_EXTRA=-Werror ${{ matrix.code_coverage }}

    - name: Remove debug and optimization and valgrind from coverage builds
      if: matrix.code_coverage
      run: |
        find . -name Makefile | xargs sed -i 's/-O[0-9]/-O0/g' # No optimizations
        find . -name Makefile | xargs sed -i 's/-g /-g0 /g' # No debugging
        : > test/run_valgrind_tests.sh # No valgrind tests.

    - name: Build
      run: make -j ${NUM_BUILD_JOBS}

    - name: Reset coverage
      if: matrix.code_coverage
      continue-on-error: true
      run: lcov --directory . -z

    - name: Run unit tests
      run: |
        make check || (cat test/test-suite.log && false)

    - name: Gather coverage
      if: matrix.code_coverage
      run: |
        lcov --rc lcov_branch_coverage=1 -rc lcov_function_coverage=1 --directory . --capture --no-external --output-file "gerbv-lcov.info"

    - name: Upload coverage to coveralls
      if: matrix.code_coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: gerbv-lcov.info

    # - name: Rebuild Fedora 38
    #   if: "!matrix.code_coverage"
    #   run: npx --package mini-cross@0.15.2 mc --no-tty fedora_38 .mc/rebuild.sh

    # - name: Rebuild Ubuntu 22.04
    #   if: "!matrix.code_coverage"
    #   run: npx --package mini-cross@0.15.2 mc --no-tty ubuntu_22.04 .mc/rebuild.sh

    - name: Rebuild Debian 12
      if: "!matrix.code_coverage"
      run: npx --package mini-cross@0.15.2 mc --no-tty debian_12 .mc/rebuild.sh

    # - name: Rebuild Windows amd64
    #   if: "!matrix.code_coverage"
    #   run: npx --package mini-cross@0.15.2 mc --no-tty windows_amd64 .mc/rebuild.sh

    # - name: Upload executable artifacts
    #   if: "!matrix.code_coverage"
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: gerbv
    #     path: gerbv.github.io/ci/gerbv*
    #     if-no-files-found: error

    # - name: Rebuild gerbv.github.io
    #   if: "!matrix.code_coverage"
    #   run: |
    #     npx --package mini-cross@0.15.2 mc --no-tty website make -C gerbv.github.io
    #     find gerbv.github.io -type f -name '.gitignore' -exec rm {} \;

    # - name: Deploy gerbv.github.io
    #   uses: JamesIves/github-pages-deploy-action@v4.4.1
    #   with:
    #     repository-name: gerbv/gerbv.github.io
    #     branch: gh-pages
    #     folder: gerbv.github.io
    #     token: ${{ secrets.GERBV_BUILDBOT_PAT }}
    #     git-config-name: gerbv-buildbot
    #     git-config-email: violetland+gerbv@mail.ru
    #     single-commit: true
    #   # @see https://github.community/t/how-can-i-test-if-secrets-are-available-in-an-action/17911/10
    #   env:
    #     GERBV_BUILDBOT_PAT: ${{ secrets.GERBV_BUILDBOT_PAT }}
    #   if: ${{ success() && github.event_name == 'push' && env.GERBV_BUILDBOT_PAT  && !matrix.code_coverage }}

    - name: Package gerbv as an AppImage
      if: "!matrix.code_coverage"
      # run: |
      #   make distclean
      #   wget -c https://github.com/TheAssassin/appimagecraft/releases/download/continuous/appimagecraft-x86_64.AppImage
      #   chmod +x appimagecraft-x86_64.AppImage
      #   ./appimagecraft-x86_64.AppImage
      #   rm appimagecraft-x86_64.AppImage
      #   cp *.AppImage continous_gerbv
      run: npx --package mini-cross@0.15.2 mc --no-tty appimage .mc/rebuild.sh

    - name: Delete previous continuous release
      uses: dev-drprasad/delete-tag-and-release@v1.1
      with:
        tag_name: continuousQQQ
        delete_release: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ success() && github.event_name == 'push' && !matrix.code_coverage }}

    - name: Create continuous release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: "continous_gerbv/*"
        body: |
          :heavy_check_mark:gerbv built from latest commit ([${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})).

          :scroll: Build log: https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks?check_suite_id=${{ github.run_id }}
        commit: ${{ github.sha }}
        draft: false
        name: Continuous build
        prerelease: true
        removeArtifacts: true
        replacesArtifacts: true
        skipIfReleaseExists: false
        tag: continuousQQQ
        token: "${{ secrets.GITHUB_TOKEN }}"
      if: ${{ success() && github.event_name == 'push' && !matrix.code_coverage }}

    # - name: Set variables
    #   run: |
    #     echo "VERSION=\"${GITHUB_REF_NAME} $(date +'%Y-%m-%d')\"" >> $GITHUB_ENV
    #     COUNT=0
    #     TEXT=""
    #     while read -r line; do
    #         if [[ "===========" =~ "$line" ]]; then
    #             (( COUNT+=1 ))
    #         fi
    #         if (( COUNT == 2 )); then
    #             TEXT+="$line \n"
    #         fi
    #     done <NEWS
    #     echo "CHANGELOG=${TEXT}" >> $GITHUB_ENV

    # - name: Create versioned release
    #   uses: ncipollo/release-action@v1
    #   with:
    #     allowUpdates: false
    #     artifacts: "tag_gerbv/*"
    #     body: |
    #       **Version ${{ env.VERSION }}.**

    #       ${{ env.CHANGELOG }}

    #       Full [ChangeLog](https://github.com/gerbv/gerbv/blob/main/NEWS)
    #     commit: ${{ github.sha }}
    #     draft: true
    #     name: ${{ github.ref_name }}
    #     prerelease: false
    #     replacesArtifacts: true
    #     skipIfReleaseExists: true
    #     tag: ${{ github.ref_name }}
    #     token: "${{ secrets.GITHUB_TOKEN }}"
    #   if: ${{ success() && github.event_name == 'push' && github.ref_name != 'main' && !matrix.code_coverage }}
